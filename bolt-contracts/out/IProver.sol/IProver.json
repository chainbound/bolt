{"abi":[{"type":"function","name":"prove","inputs":[{"name":"proof","type":"bytes","internalType":"bytes"},{"name":"store","type":"bool","internalType":"bool"}],"outputs":[{"name":"fact","type":"tuple","internalType":"struct Fact","components":[{"name":"account","type":"address","internalType":"address"},{"name":"sig","type":"bytes32","internalType":"FactSignature"},{"name":"data","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"prove(bytes,bool)":"e19108c3"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"store\",\"type\":\"bool\"}],\"name\":\"prove\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"FactSignature\",\"name\":\"sig\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Fact\",\"name\":\"fact\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Theori, Inc.\",\"kind\":\"dev\",\"methods\":{\"prove(bytes,bool)\":{\"params\":{\"proof\":\"the encoded proof, depends on the prover implementation\",\"store\":\"whether to store the facts in the reliquary\"},\"returns\":{\"fact\":\"the proven fact information\"}}},\"title\":\"IProver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"prove(bytes,bool)\":{\"notice\":\"prove a fact and optionally store it in the Reliquary\"}},\"notice\":\"IProver is a standard interface implemented by some Relic provers.         Supports proving a fact ephemerally or proving and storing it in the         Reliquary.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/relic-sdk/packages/contracts/interfaces/IProver.sol\":\"IProver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":relic-sdk/=lib/relic-sdk/\"]},\"sources\":{\"lib/relic-sdk/packages/contracts/interfaces/IProver.sol\":{\"keccak256\":\"0x6d29e6e2ca552ced30098b81785997a8527b76d0e46d67cafcbd91fa154551d1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e4ff2f7561f147ed318b77e5199575bf7a53035a642722d335b9d6c73e25fee\",\"dweb:/ipfs/QmS9e8jQEKkAZK9MyhdJtGxnxaH3LFxVoXqzPo1DTZKvhd\"]},\"lib/relic-sdk/packages/contracts/lib/Facts.sol\":{\"keccak256\":\"0x1a1b1baeabcf4cb125407cdcc21ab65e44f27cab9d69efaa144b47c027b775a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9f5174c39aaa043346d5350840c6bcb7e6ec1bb6f6ef41eca354b5f0b40fed5\",\"dweb:/ipfs/QmZA71gBL91KAgXD6YH5sMvrzoDUY84BfCUREVK3d2JB5Q\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"proof","type":"bytes"},{"internalType":"bool","name":"store","type":"bool"}],"stateMutability":"payable","type":"function","name":"prove","outputs":[{"internalType":"struct Fact","name":"fact","type":"tuple","components":[{"internalType":"address","name":"account","type":"address"},{"internalType":"FactSignature","name":"sig","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}]}]}],"devdoc":{"kind":"dev","methods":{"prove(bytes,bool)":{"params":{"proof":"the encoded proof, depends on the prover implementation","store":"whether to store the facts in the reliquary"},"returns":{"fact":"the proven fact information"}}},"version":1},"userdoc":{"kind":"user","methods":{"prove(bytes,bool)":{"notice":"prove a fact and optionally store it in the Reliquary"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","relic-sdk/=lib/relic-sdk/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/relic-sdk/packages/contracts/interfaces/IProver.sol":"IProver"},"evmVersion":"paris","libraries":{}},"sources":{"lib/relic-sdk/packages/contracts/interfaces/IProver.sol":{"keccak256":"0x6d29e6e2ca552ced30098b81785997a8527b76d0e46d67cafcbd91fa154551d1","urls":["bzz-raw://3e4ff2f7561f147ed318b77e5199575bf7a53035a642722d335b9d6c73e25fee","dweb:/ipfs/QmS9e8jQEKkAZK9MyhdJtGxnxaH3LFxVoXqzPo1DTZKvhd"],"license":"MIT"},"lib/relic-sdk/packages/contracts/lib/Facts.sol":{"keccak256":"0x1a1b1baeabcf4cb125407cdcc21ab65e44f27cab9d69efaa144b47c027b775a1","urls":["bzz-raw://d9f5174c39aaa043346d5350840c6bcb7e6ec1bb6f6ef41eca354b5f0b40fed5","dweb:/ipfs/QmZA71gBL91KAgXD6YH5sMvrzoDUY84BfCUREVK3d2JB5Q"],"license":"MIT"}},"version":1},"id":26}